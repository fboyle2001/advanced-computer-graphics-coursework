from vertex_graph import VertexSplittingGraph
import time

graph = VertexSplittingGraph()
seen_vertices = 0
preserved = []

def process_vertex(arguments):
    global seen_vertices
    seen_vertices += 1
    graph.add_node(str(seen_vertices), tuple(float(coord) for coord in arguments))

def process_texture(arguments):
    # print("Texture", arguments)
    return

def process_normal(arguments):
    # print("Normal", arguments)
    return

def process_free_form(arguments):
    assert False, "Not handling free form"

def process_face(arguments):
    assert len(arguments) == 3, f"Only triangles are supported, received {len(arguments)} vertices for a polygon"
    # print("Face", arguments)

    face_indices = [str(arg.split("/")[0]) for arg in arguments]
    graph.add_edge(face_indices[0], face_indices[1])
    graph.add_edge(face_indices[0], face_indices[2])
    graph.add_edge(face_indices[1], face_indices[2])

def process_line(arguments):
    assert False, "Not handling line"

def process_comment(arguments):
    # Ignore comments
    return

def process_other(op_code, arguments):
    if op_code != "usemtl":
        preserved.append(f"{op_code} {' '.join(arguments)}")

op_codes = {
    "v": process_vertex,
    "vt": process_texture,
    "vn": process_normal,
    "vp": process_free_form,
    "f": process_face,
    "l": process_line,
    "#": process_comment
}

def process_obj_file(fp):
    for item_line in fp.readlines():
        item_line = item_line.strip()
        
        if len(item_line) == 0:
            continue
        
        whitespace_split = item_line.split(" ")
        op_code = whitespace_split[0]
        arguments = whitespace_split[1:]

        if op_code not in op_codes.keys():
            process_other(op_code, arguments)
        else:
            op_codes[op_code](arguments)

def write_obj_file(file_name, preserved_headers):
    current_time = time.time()

    lines = [
        f"# Generated by progressive_generator.py at {current_time}",
        "# Preserved Headers",
        *preserved_headers
    ]

    lines.append("")
    lines.append("# Vertices")

    real_index_map = {}

    for real_index, index in enumerate(graph.indices, 1):
        x, y, z = graph.index_data[index]
        lines.append(f"v {x} {y} {z}")
        real_index_map[index] = real_index

    lines.append("")
    lines.append("# Polygon Faces")

    for a, b, c in graph.compute_all_polygons():
        real_a, real_b, real_c = real_index_map[a], real_index_map[b], real_index_map[c]
        lines.append(f"f {real_a}// {real_b}// {real_c}//")

    with open(f"{file_name}_reduced_{current_time}.obj", "w+") as fp:
        for line in lines:
            fp.write(f"{line}\n")

if __name__ == "__main__":
    file_name = "table_high_detail"

    with open(f"{file_name}.obj", "r") as fp:
        process_obj_file(fp)

    for i in range(150):
        a, b = graph.determine_optimal_vertex()
        graph.collapse_edge(a, b)
        print(f"Removed edge: ({a}, {b})")
        print(f"Polygons: {len(graph.compute_all_polygons())}")

    write_obj_file(file_name, preserved_headers=preserved)

    
